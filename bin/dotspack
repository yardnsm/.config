#!/usr/bin/env bash

cd "$(dirname "${BASH_SOURCE[0]}")" \
  && source "../.setup/initializer.sh"

#
# Pack (most of) the dotfiles into a zip file
#

# NOTE These were defined back then as global environment varibles.
export DOTFILES=$XDG_CONFIG_HOME
export DOTFILES_LOCAL=$HOME/dotfiles-local

# ---------------------------------------------

pack() {
  local -r src="$1"
  local -r dest="$2"

  mkdir -p "$(dirname "$dest")"

  cp -r "$src" "$dest" & \
    spinner:show_for_process $! "Packing $src"

  output::result $? "Packing $src"

}

remove_vim_plugins() {
  local -r dest="$1"

  local -a PLUGINS=(
    "vim-import-cost"
  )

  for plugin in "${PLUGINS[@]}"; do
    rm -rf "${dest:?}/$plugin" & \
      spinner:show_for_process $! "Removing $plugin"

    output::result $? "Removing $plugin"
  done

}

prune_git() {
  (find "$1" | grep "\\.git/" | xargs rm -rf) & \
    spinner:show_for_process $! "Pruning $1"

  output::result $? "Pruning $1"
}

create_zip() {
  local -r zip_path="$HOME/packs/dotfiles_pack_$(date +%s).zip"

  output::status "Creating a zip file from $1"
  output::divider

  mkdir -p "$(dirname "$zip_path")"

  pushd "$1" &> /dev/null \
    || return 1

  zip -r "$zip_path" . &> /dev/null & \
    spinner:show_for_process $! "Zipping $1"

  popd &> /dev/null \
    || return 1

  output::divider
  output::divider

  output::success "Zip created at $zip_path"
}

# ---------------------------------------------

main() {
  local tmp_dir
  tmp_dir="$(mktemp -d)"

  output::title "Packing dotfiles"
  output::divider

  output::status "Packing into $tmp_dir"
  output::divider

  cat <<EOF
        This script will pack (most of) the necessary dotfiles you'll need when moving a machine
        that doesn't have the ability to run the installer (for example, a machine that does not
        have an internet connection). It'll use the current installation of the dotfiles for the
        most parts.

        It's recommended to run :PlugClean within Vim before running this script.

EOF

  ask::prompt_confirmation "Continue? "

  if ! ask::answer_is_yes; then
    output::error "Error: aborted"
    exit 1
  fi

  # Yeah, the files list is hard-coded like this and it's ugly and not scalable, but I needed
  # to have a small solution that works for very specific files that I need to take with me.

  output::info "Packing all the files"

  # Vim configs
  pack "$DOTFILES/nvim/.vimrc" "$tmp_dir/.vimrc"
  pack "$DOTFILES/nvim/nvim.conf" "$tmp_dir/.config/nvim"
  pack "$HOME/.config/coc/" "$tmp_dir/.config/coc"

  # Tmux stuff
  pack "$DOTFILES/tmux/.tmux.conf" "$tmp_dir/.tmux.conf"
  pack "$DOTFILES/tmux/right_segments.sh" "$tmp_dir/dotfiles/tmux/right_segments.sh"
  pack "$HOME/.tmux" "$tmp_dir/.tmux"

  # Zsh stuff
  pack "$DOTFILES/zsh/.zshrc" "$tmp_dir/.zshrc"
  pack "$DOTFILES/zsh/completions" "$tmp_dir/dotfiles/zsh/completions"
  pack "$DOTFILES/zsh/functions" "$tmp_dir/dotfiles/zsh/functions"
  pack "$DOTFILES/zsh/prompt" "$tmp_dir/dotfiles/zsh/prompt"
  pack "$DOTFILES/zsh/aliases.zsh" "$tmp_dir/dotfiles/zsh/aliases.zsh"
  pack "$DOTFILES/zsh/config.zsh" "$tmp_dir/dotfiles/zsh/config.zsh"
  pack "$DOTFILES/zsh/env.zsh" "$tmp_dir/dotfiles/zsh/env.zsh"
  pack "$DOTFILES/zsh/functions.zsh" "$tmp_dir/dotfiles/zsh/functions.zsh"

  # Submodules
  pack "$SUBMODULES/base16-shell" "$tmp_dir/dotfiles/.submodules/base16-shell"
  pack "$SUBMODULES/blox-zsh-theme" "$tmp_dir/dotfiles/.submodules/blox-zsh-theme"
  pack "$SUBMODULES/tpm" "$tmp_dir/dotfiles/.submodules/tpm"

  # Git stuff
  pack "$DOTFILES/git/.gitconfig" "$tmp_dir/.gitconfig"
  pack "$DOTFILES/git/.gitignore_global" "$tmp_dir/.gitignore_global"

  # fzf
  pack "$HOME/.fzf" "$tmp_dir/.fzf"

  print_info "Removing unused vim plugins"
  remove_vim_plugins "$tmp_dir/.config/nvim/plugged"

  print_info "Pruning .git dirs"
  prune_git "$tmp_dir"

  print_info "Zipping"
  create_zip "$tmp_dir"
}

main "$@"
